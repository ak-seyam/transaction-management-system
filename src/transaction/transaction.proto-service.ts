// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.2
//   protoc               v3.21.12
// source: src/proto/service.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "transaction";

export enum MessaageType {
  AUTHORIZATION = 0,
  CLEARING = 1,
  UNRECOGNIZED = -1,
}

export enum AckStatus {
  SUCCESS = 0,
  FAILED = 1,
  UNRECOGNIZED = -1,
}

export interface TransactionEvent {
  type: MessaageType;
  reference: string;
  currency: string;
  amount: number;
  fractionalDigits: number;
  feesCurrency: string;
  feesAmount: number;
  feesFractionalDigits: number;
  providerEventTime: Date | undefined;
}

export interface Ack {
  status: AckStatus;
  eventTime: Date | undefined;
}

export const TRANSACTION_PACKAGE_NAME = "transaction";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface TransactionServiceClient {
  getTransactionEvent(request: TransactionEvent): Observable<Ack>;
}

export interface TransactionServiceController {
  getTransactionEvent(request: TransactionEvent): Promise<Ack> | Observable<Ack> | Ack;
}

export function TransactionServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getTransactionEvent"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TransactionService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TRANSACTION_SERVICE_NAME = "TransactionService";
